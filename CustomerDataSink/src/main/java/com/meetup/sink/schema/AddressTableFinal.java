/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.meetup.sink.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AddressTableFinal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3317163992702895301L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AddressTableFinal\",\"namespace\":\"com.meetup.sink.schema\",\"fields\":[{\"name\":\"TARGET_CUSTOMER_ID\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"ADDRESS_LINE_1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ADDRESS_LINE_2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"CITY\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"STATE\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ZIP\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AddressTableFinal> ENCODER =
      new BinaryMessageEncoder<AddressTableFinal>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AddressTableFinal> DECODER =
      new BinaryMessageDecoder<AddressTableFinal>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AddressTableFinal> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AddressTableFinal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AddressTableFinal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AddressTableFinal>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AddressTableFinal to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AddressTableFinal from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AddressTableFinal instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AddressTableFinal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.Long TARGET_CUSTOMER_ID;
   private java.lang.CharSequence ADDRESS_LINE_1;
   private java.lang.CharSequence ADDRESS_LINE_2;
   private java.lang.CharSequence CITY;
   private java.lang.CharSequence STATE;
   private java.lang.CharSequence ZIP;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AddressTableFinal() {}

  /**
   * All-args constructor.
   * @param TARGET_CUSTOMER_ID The new value for TARGET_CUSTOMER_ID
   * @param ADDRESS_LINE_1 The new value for ADDRESS_LINE_1
   * @param ADDRESS_LINE_2 The new value for ADDRESS_LINE_2
   * @param CITY The new value for CITY
   * @param STATE The new value for STATE
   * @param ZIP The new value for ZIP
   */
  public AddressTableFinal(java.lang.Long TARGET_CUSTOMER_ID, java.lang.CharSequence ADDRESS_LINE_1, java.lang.CharSequence ADDRESS_LINE_2, java.lang.CharSequence CITY, java.lang.CharSequence STATE, java.lang.CharSequence ZIP) {
    this.TARGET_CUSTOMER_ID = TARGET_CUSTOMER_ID;
    this.ADDRESS_LINE_1 = ADDRESS_LINE_1;
    this.ADDRESS_LINE_2 = ADDRESS_LINE_2;
    this.CITY = CITY;
    this.STATE = STATE;
    this.ZIP = ZIP;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TARGET_CUSTOMER_ID;
    case 1: return ADDRESS_LINE_1;
    case 2: return ADDRESS_LINE_2;
    case 3: return CITY;
    case 4: return STATE;
    case 5: return ZIP;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TARGET_CUSTOMER_ID = (java.lang.Long)value$; break;
    case 1: ADDRESS_LINE_1 = (java.lang.CharSequence)value$; break;
    case 2: ADDRESS_LINE_2 = (java.lang.CharSequence)value$; break;
    case 3: CITY = (java.lang.CharSequence)value$; break;
    case 4: STATE = (java.lang.CharSequence)value$; break;
    case 5: ZIP = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'TARGET_CUSTOMER_ID' field.
   * @return The value of the 'TARGET_CUSTOMER_ID' field.
   */
  public java.lang.Long getTARGETCUSTOMERID() {
    return TARGET_CUSTOMER_ID;
  }


  /**
   * Sets the value of the 'TARGET_CUSTOMER_ID' field.
   * @param value the value to set.
   */
  public void setTARGETCUSTOMERID(java.lang.Long value) {
    this.TARGET_CUSTOMER_ID = value;
  }

  /**
   * Gets the value of the 'ADDRESS_LINE_1' field.
   * @return The value of the 'ADDRESS_LINE_1' field.
   */
  public java.lang.CharSequence getADDRESSLINE1() {
    return ADDRESS_LINE_1;
  }


  /**
   * Sets the value of the 'ADDRESS_LINE_1' field.
   * @param value the value to set.
   */
  public void setADDRESSLINE1(java.lang.CharSequence value) {
    this.ADDRESS_LINE_1 = value;
  }

  /**
   * Gets the value of the 'ADDRESS_LINE_2' field.
   * @return The value of the 'ADDRESS_LINE_2' field.
   */
  public java.lang.CharSequence getADDRESSLINE2() {
    return ADDRESS_LINE_2;
  }


  /**
   * Sets the value of the 'ADDRESS_LINE_2' field.
   * @param value the value to set.
   */
  public void setADDRESSLINE2(java.lang.CharSequence value) {
    this.ADDRESS_LINE_2 = value;
  }

  /**
   * Gets the value of the 'CITY' field.
   * @return The value of the 'CITY' field.
   */
  public java.lang.CharSequence getCITY() {
    return CITY;
  }


  /**
   * Sets the value of the 'CITY' field.
   * @param value the value to set.
   */
  public void setCITY(java.lang.CharSequence value) {
    this.CITY = value;
  }

  /**
   * Gets the value of the 'STATE' field.
   * @return The value of the 'STATE' field.
   */
  public java.lang.CharSequence getSTATE() {
    return STATE;
  }


  /**
   * Sets the value of the 'STATE' field.
   * @param value the value to set.
   */
  public void setSTATE(java.lang.CharSequence value) {
    this.STATE = value;
  }

  /**
   * Gets the value of the 'ZIP' field.
   * @return The value of the 'ZIP' field.
   */
  public java.lang.CharSequence getZIP() {
    return ZIP;
  }


  /**
   * Sets the value of the 'ZIP' field.
   * @param value the value to set.
   */
  public void setZIP(java.lang.CharSequence value) {
    this.ZIP = value;
  }

  /**
   * Creates a new AddressTableFinal RecordBuilder.
   * @return A new AddressTableFinal RecordBuilder
   */
  public static com.meetup.sink.schema.AddressTableFinal.Builder newBuilder() {
    return new com.meetup.sink.schema.AddressTableFinal.Builder();
  }

  /**
   * Creates a new AddressTableFinal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AddressTableFinal RecordBuilder
   */
  public static com.meetup.sink.schema.AddressTableFinal.Builder newBuilder(com.meetup.sink.schema.AddressTableFinal.Builder other) {
    if (other == null) {
      return new com.meetup.sink.schema.AddressTableFinal.Builder();
    } else {
      return new com.meetup.sink.schema.AddressTableFinal.Builder(other);
    }
  }

  /**
   * Creates a new AddressTableFinal RecordBuilder by copying an existing AddressTableFinal instance.
   * @param other The existing instance to copy.
   * @return A new AddressTableFinal RecordBuilder
   */
  public static com.meetup.sink.schema.AddressTableFinal.Builder newBuilder(com.meetup.sink.schema.AddressTableFinal other) {
    if (other == null) {
      return new com.meetup.sink.schema.AddressTableFinal.Builder();
    } else {
      return new com.meetup.sink.schema.AddressTableFinal.Builder(other);
    }
  }

  /**
   * RecordBuilder for AddressTableFinal instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AddressTableFinal>
    implements org.apache.avro.data.RecordBuilder<AddressTableFinal> {

    private java.lang.Long TARGET_CUSTOMER_ID;
    private java.lang.CharSequence ADDRESS_LINE_1;
    private java.lang.CharSequence ADDRESS_LINE_2;
    private java.lang.CharSequence CITY;
    private java.lang.CharSequence STATE;
    private java.lang.CharSequence ZIP;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.meetup.sink.schema.AddressTableFinal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TARGET_CUSTOMER_ID)) {
        this.TARGET_CUSTOMER_ID = data().deepCopy(fields()[0].schema(), other.TARGET_CUSTOMER_ID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ADDRESS_LINE_1)) {
        this.ADDRESS_LINE_1 = data().deepCopy(fields()[1].schema(), other.ADDRESS_LINE_1);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ADDRESS_LINE_2)) {
        this.ADDRESS_LINE_2 = data().deepCopy(fields()[2].schema(), other.ADDRESS_LINE_2);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.CITY)) {
        this.CITY = data().deepCopy(fields()[3].schema(), other.CITY);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.STATE)) {
        this.STATE = data().deepCopy(fields()[4].schema(), other.STATE);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.ZIP)) {
        this.ZIP = data().deepCopy(fields()[5].schema(), other.ZIP);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AddressTableFinal instance
     * @param other The existing instance to copy.
     */
    private Builder(com.meetup.sink.schema.AddressTableFinal other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.TARGET_CUSTOMER_ID)) {
        this.TARGET_CUSTOMER_ID = data().deepCopy(fields()[0].schema(), other.TARGET_CUSTOMER_ID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ADDRESS_LINE_1)) {
        this.ADDRESS_LINE_1 = data().deepCopy(fields()[1].schema(), other.ADDRESS_LINE_1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ADDRESS_LINE_2)) {
        this.ADDRESS_LINE_2 = data().deepCopy(fields()[2].schema(), other.ADDRESS_LINE_2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.CITY)) {
        this.CITY = data().deepCopy(fields()[3].schema(), other.CITY);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.STATE)) {
        this.STATE = data().deepCopy(fields()[4].schema(), other.STATE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ZIP)) {
        this.ZIP = data().deepCopy(fields()[5].schema(), other.ZIP);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'TARGET_CUSTOMER_ID' field.
      * @return The value.
      */
    public java.lang.Long getTARGETCUSTOMERID() {
      return TARGET_CUSTOMER_ID;
    }


    /**
      * Sets the value of the 'TARGET_CUSTOMER_ID' field.
      * @param value The value of 'TARGET_CUSTOMER_ID'.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder setTARGETCUSTOMERID(java.lang.Long value) {
      validate(fields()[0], value);
      this.TARGET_CUSTOMER_ID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'TARGET_CUSTOMER_ID' field has been set.
      * @return True if the 'TARGET_CUSTOMER_ID' field has been set, false otherwise.
      */
    public boolean hasTARGETCUSTOMERID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'TARGET_CUSTOMER_ID' field.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder clearTARGETCUSTOMERID() {
      TARGET_CUSTOMER_ID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ADDRESS_LINE_1' field.
      * @return The value.
      */
    public java.lang.CharSequence getADDRESSLINE1() {
      return ADDRESS_LINE_1;
    }


    /**
      * Sets the value of the 'ADDRESS_LINE_1' field.
      * @param value The value of 'ADDRESS_LINE_1'.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder setADDRESSLINE1(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ADDRESS_LINE_1 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ADDRESS_LINE_1' field has been set.
      * @return True if the 'ADDRESS_LINE_1' field has been set, false otherwise.
      */
    public boolean hasADDRESSLINE1() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ADDRESS_LINE_1' field.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder clearADDRESSLINE1() {
      ADDRESS_LINE_1 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ADDRESS_LINE_2' field.
      * @return The value.
      */
    public java.lang.CharSequence getADDRESSLINE2() {
      return ADDRESS_LINE_2;
    }


    /**
      * Sets the value of the 'ADDRESS_LINE_2' field.
      * @param value The value of 'ADDRESS_LINE_2'.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder setADDRESSLINE2(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ADDRESS_LINE_2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ADDRESS_LINE_2' field has been set.
      * @return True if the 'ADDRESS_LINE_2' field has been set, false otherwise.
      */
    public boolean hasADDRESSLINE2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ADDRESS_LINE_2' field.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder clearADDRESSLINE2() {
      ADDRESS_LINE_2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'CITY' field.
      * @return The value.
      */
    public java.lang.CharSequence getCITY() {
      return CITY;
    }


    /**
      * Sets the value of the 'CITY' field.
      * @param value The value of 'CITY'.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder setCITY(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.CITY = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'CITY' field has been set.
      * @return True if the 'CITY' field has been set, false otherwise.
      */
    public boolean hasCITY() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'CITY' field.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder clearCITY() {
      CITY = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'STATE' field.
      * @return The value.
      */
    public java.lang.CharSequence getSTATE() {
      return STATE;
    }


    /**
      * Sets the value of the 'STATE' field.
      * @param value The value of 'STATE'.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder setSTATE(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.STATE = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'STATE' field has been set.
      * @return True if the 'STATE' field has been set, false otherwise.
      */
    public boolean hasSTATE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'STATE' field.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder clearSTATE() {
      STATE = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'ZIP' field.
      * @return The value.
      */
    public java.lang.CharSequence getZIP() {
      return ZIP;
    }


    /**
      * Sets the value of the 'ZIP' field.
      * @param value The value of 'ZIP'.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder setZIP(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.ZIP = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'ZIP' field has been set.
      * @return True if the 'ZIP' field has been set, false otherwise.
      */
    public boolean hasZIP() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'ZIP' field.
      * @return This builder.
      */
    public com.meetup.sink.schema.AddressTableFinal.Builder clearZIP() {
      ZIP = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AddressTableFinal build() {
      try {
        AddressTableFinal record = new AddressTableFinal();
        record.TARGET_CUSTOMER_ID = fieldSetFlags()[0] ? this.TARGET_CUSTOMER_ID : (java.lang.Long) defaultValue(fields()[0]);
        record.ADDRESS_LINE_1 = fieldSetFlags()[1] ? this.ADDRESS_LINE_1 : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ADDRESS_LINE_2 = fieldSetFlags()[2] ? this.ADDRESS_LINE_2 : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.CITY = fieldSetFlags()[3] ? this.CITY : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.STATE = fieldSetFlags()[4] ? this.STATE : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.ZIP = fieldSetFlags()[5] ? this.ZIP : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AddressTableFinal>
    WRITER$ = (org.apache.avro.io.DatumWriter<AddressTableFinal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AddressTableFinal>
    READER$ = (org.apache.avro.io.DatumReader<AddressTableFinal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.TARGET_CUSTOMER_ID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.TARGET_CUSTOMER_ID);
    }

    if (this.ADDRESS_LINE_1 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ADDRESS_LINE_1);
    }

    if (this.ADDRESS_LINE_2 == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ADDRESS_LINE_2);
    }

    if (this.CITY == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.CITY);
    }

    if (this.STATE == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.STATE);
    }

    if (this.ZIP == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.ZIP);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.TARGET_CUSTOMER_ID = null;
      } else {
        this.TARGET_CUSTOMER_ID = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ADDRESS_LINE_1 = null;
      } else {
        this.ADDRESS_LINE_1 = in.readString(this.ADDRESS_LINE_1 instanceof Utf8 ? (Utf8)this.ADDRESS_LINE_1 : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ADDRESS_LINE_2 = null;
      } else {
        this.ADDRESS_LINE_2 = in.readString(this.ADDRESS_LINE_2 instanceof Utf8 ? (Utf8)this.ADDRESS_LINE_2 : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.CITY = null;
      } else {
        this.CITY = in.readString(this.CITY instanceof Utf8 ? (Utf8)this.CITY : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.STATE = null;
      } else {
        this.STATE = in.readString(this.STATE instanceof Utf8 ? (Utf8)this.STATE : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.ZIP = null;
      } else {
        this.ZIP = in.readString(this.ZIP instanceof Utf8 ? (Utf8)this.ZIP : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.TARGET_CUSTOMER_ID = null;
          } else {
            this.TARGET_CUSTOMER_ID = in.readLong();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ADDRESS_LINE_1 = null;
          } else {
            this.ADDRESS_LINE_1 = in.readString(this.ADDRESS_LINE_1 instanceof Utf8 ? (Utf8)this.ADDRESS_LINE_1 : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ADDRESS_LINE_2 = null;
          } else {
            this.ADDRESS_LINE_2 = in.readString(this.ADDRESS_LINE_2 instanceof Utf8 ? (Utf8)this.ADDRESS_LINE_2 : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.CITY = null;
          } else {
            this.CITY = in.readString(this.CITY instanceof Utf8 ? (Utf8)this.CITY : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.STATE = null;
          } else {
            this.STATE = in.readString(this.STATE instanceof Utf8 ? (Utf8)this.STATE : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.ZIP = null;
          } else {
            this.ZIP = in.readString(this.ZIP instanceof Utf8 ? (Utf8)this.ZIP : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










